/**
 * Register file or memory containing 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load == 1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 * 
 * Design from the book "The Elements of Computing Systems"
 * by Nisan and Schocken, MIT Press.
 * 
 * Author: Naga Kandasamy
 * Date created: July 12, 2020
 * 
 * Student name(s): Cole Bardin 
 * Date modified: 7/17/2023
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    // Implementation tip: Feed the in value simultaneously to all the registers. 
    // Use mux / demux chips to select the register specified by address.
    PARTS:
    // Demux the address to set load for the desired register
    DMux8Way(in=load, sel=address, a=l0, b=l1, c=l2, d=l3, e=l4, f=l5, g=l6, h=l7);
    // Use eight 16-bit registers with demuxed load lines
    Register(in=in, load=l0, out=r0);
    Register(in=in, load=l1, out=r1);
    Register(in=in, load=l2, out=r2);
    Register(in=in, load=l3, out=r3);
    Register(in=in, load=l4, out=r4);
    Register(in=in, load=l5, out=r5);
    Register(in=in, load=l6, out=r6);
    Register(in=in, load=l7, out=r7);
    // Multiplex the registers with the address input
    Mux8Way16(a=r0, b=r1, c=r2, d=r3, e=r4, f=r5, g=r6, h=r7, sel=address, out=out);
    // TODO: complete the implementation of RAM8.
}
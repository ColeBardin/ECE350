/**
 * 16-bit Hack ALU from the book "The Elements of Computing Systems"
 * by Nisan and Schocken, MIT Press.
 * 
 * The ALU computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * 
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 * 
 * Implementation: the ALU logic manipulates the x and y inputs
 * and operates on the resulting values, as follows:
 * if (zx == 1) set x = 0        // 16-bit constant
 * if (nx == 1) set x = !x       // bitwise not
 * if (zy == 1) set y = 0        // 16-bit constant
 * if (ny == 1) set y = !y       // bitwise not
 * if (f == 1)  set out = x + y  // integer 2's complement addition
 * if (f == 0)  set out = x & y  // bitwise and
 * if (no == 1) set out = !out   // bitwise not
 * if (out == 0) set zr = 1
 * if (out < 0) set ng = 1
 * 
 * Author: Naga Kandasamy
 * Date created: July 10, 2020
 * Date modified: July 1, 2023
 * 
 * Name of student: Cole Bardin
 * Date modified: 7/12/23
*/

CHIP ALU {
    IN  
        x[16], y[16],       // 16-bit inputs        
        zx,                 // zero the x input?
        nx,                 // negate the x input?
        zy,                 // zero the y input?
        ny,                 // negate the y input?
        f,                  // compute out = x + y (if 1) or x & y (if 0)
        no;                 // negate the out output?

    OUT 
        out[16],            // 16-bit output
        zr,                 // 1 if (out == 0), 0 otherwise
        ng;                 // 1 if (out < 0),  0 otherwise

    PARTS:
    // Preset inputs
    Mux16(a=x, b=false, sel=zx, out=Xz); // zx input
    Mux16(a=y, b=false, sel=zy, out=Yz); // zy input
    Not16(in=Xz, out=NXz); // not X
    Not16(in=Yz, out=NYz); // not Y
    Mux16(a=Xz, b=NXz, sel=nx, out=Xzn); // nx input
    Mux16(a=Yz, b=NYz, sel=ny, out=Yzn); // ny input

    // ALU Operation
    And16(a=Xzn, b=Yzn, out=XandY); // X&Y
    Add16(a=Xzn, b=Yzn, out=XplusY); // X+Y
    Mux16(a=XandY, b=XplusY, sel=f, out=ALUout); // f input

    // Post-set ALU Output
    Not16(in=ALUout, out=NALUout); // not ALU operation output
    Mux16(a=ALUout, b=NALUout, sel=no, out=out, out[0..7]=lsb, out[8..15]=msb, out[15]=ng); // no input and ng output
    // zr
    Or8Way(in=lsb, out=outORlsb); // 8 way or of LSBs
    Or8Way(in=msb, out=outORmsb); // 8 way or of MSBs
    Or(a=outORlsb, b=outORmsb, out=Nzr); // Or LSBs and MSBs, 1 if output is NOT zero
    Not(in=Nzr, out=zr); // zr output
}